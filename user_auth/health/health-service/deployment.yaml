apiVersion: v1
kind: Namespace
metadata:
  name: platform
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: health-service-sa
  namespace: platform
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: health-service-role
  namespace: platform
rules:
- apiGroups: [""]
  resources: ["pods","services","endpoints","events"]
  verbs: ["get","list","watch","create","patch"]
- apiGroups: ["apps"]
  resources: ["deployments","replicasets"]
  verbs: ["get","list","watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: health-service-rb
  namespace: platform
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: health-service-role
subjects:
- kind: ServiceAccount
  name: health-service-sa
  namespace: platform
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: health-service
  namespace: platform
spec:
  replicas: 1
  selector: { matchLabels: { app: health-service } }
  template:
    metadata: { labels: { app: health-service } }
    spec:
      serviceAccountName: health-service-sa
      containers:
      - name: health-service
        image: your-registry/health-service:latest
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        imagePullPolicy: IfNotPresent
        env:
        - { name: K8S_NAMESPACE, value: "platform" }
        - { name: CHECK_INTERVAL, value: "20" }
        - { name: RESTART_THRESHOLD, value: "3" }
        ports: [ { containerPort: 8080 } ]
---
apiVersion: v1
kind: Service
metadata:
  name: health-service
  namespace: platform
spec:
  selector: { app: health-service }
  ports:
  - { port: 8080, targetPort: 8080 }
