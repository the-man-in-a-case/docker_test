worker_processes  auto;
events { worker_connections  4096; }

http {
  lua_shared_dict circuit 10m;
  resolver kube-dns.kube-system.svc.cluster.local valid=10s ipv6=off;

  # rate limiting zone (可选)
  limit_req_zone $binary_remote_addr zone=req:10m rate=1r/s;

  server {
    listen 8080;
    set $default_ns "tenant-a";

    # 封装 manager 地址（ClusterIP Service）
    set $manager_host "http://managersvc.platform.svc.cluster.local:8000";

    location / {
      limit_req zone=req burst=5 nodelay;

      access_by_lua_block {
        local cjson = require "cjson.safe"
        local http = require "resty.http"

        -- 读入 AuthN 注入的头
        local user_id = ngx.req.get_headers()["X-User-ID"]
        local user_ns = ngx.req.get_headers()["X-User-NS"] or ngx.var.default_ns

        if not user_id or user_id == "" then
          return ngx.exit(401)
        end

        -- 调用 Manager 内部 API
        local httpc = http.new()
        httpc:set_timeout(2000) -- 2s timeout

        local manager_url = ngx.var.manager_host .. "/internal/ensure-deployment/"

        local body = cjson.encode({user_id = tonumber(user_id), namespace = user_ns})
        local res, err = httpc:request_uri(manager_url, {
          method = "POST",
          body = body,
          headers = {
            ["Content-Type"] = "application/json",
            -- 可透传签名头以证明请求合法（可选）
            ["X-Internal-Auth"] = ngx.var.http_x_route_signature or ""
          },
          keepalive = false,
        })

        if not res then
          ngx.log(ngx.ERR, "manager request failed: ", err)
          -- 如果无法联系 manager，返回兜底唤醒页（也可尝试继续 proxy）
          ngx.status = 200
          ngx.header.content_type = "text/html"
          ngx.say("<html><body><h2>正在唤醒您的专属环境（管理服务不可用），请稍候刷新。</h2></body></html>")
          return ngx.exit(200)
        end

        -- 处理 manager 返回
        if res.status == 200 then
          -- {"status":"ok"}
          -- 允许继续执行 proxy_pass（后续指令会执行）
          ngx.ctx.manager_ok = true
          return
        elseif res.status == 202 then
          -- {"status":"scaling"}，已触发扩容
          ngx.status = 200
          ngx.header.content_type = "text/html"
          ngx.say("<html><body><h2>正在唤醒您的专属环境，请稍候并刷新页面......</h2></body></html>")
          return ngx.exit(200)
        elseif res.status == 404 then
          ngx.status = 200
          ngx.header.content_type = "text/html"
          ngx.say("<html><body><h2>专属环境未部署，正在准备中，请稍候。</h2></body></html>")
          return ngx.exit(200)
        else
          -- 其他错误
          ngx.log(ngx.ERR, "manager returned status: ", res.status, ", body: ", res.body)
          ngx.status = 200
          ngx.header.content_type = "text/html"
          ngx.say("<html><body><h2>系统繁忙，请稍候刷新。</h2></body></html>")
          return ngx.exit(200)
        end
      }  # access_by_lua_block end

      # 若 access 阶段返回正常，则执行 proxy_pass
      set $target "";
      rewrite_by_lua_block {
        local uid = ngx.req.get_headers()["X-User-ID"]
        local ns = ngx.req.get_headers()["X-User-NS"] or ngx.var.default_ns
        ngx.var.target = "http://user-"..uid.."-svc."..ns..".svc.cluster.local"
      }

      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      proxy_pass $target;

      # 当上游返回 502/504/404 时，也展示唤醒兜底页（双保险）
      proxy_intercept_errors on;
      error_page 404 502 504 = @wakeup;
    }

    location @wakeup {
      default_type text/html;
      return 200 '<html><body><h2>您的专属环境正在唤醒，请稍候刷新页面。</h2></body></html>';
    }
  }
}
