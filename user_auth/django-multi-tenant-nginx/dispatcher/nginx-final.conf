worker_processes  auto;
events { worker_connections  4096; }

http {
  lua_shared_dict circuit 10m;
  lua_shared_dict user_cache 10m;  # 缓存用户状态
  resolver kube-dns.kube-system.svc.cluster.local valid=10s ipv6=off;

  # 限流配置
  limit_req_zone $binary_remote_addr zone=req:10m rate=1r/s;
  
  # 日志格式
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for" '
                  'user_id=$http_x_user_id namespace=$http_x_user_ns';

  server {
    listen 8080;
    set $default_ns "tenant-a";
    set $manager_host "http://managersvc.platform.svc.cluster.local:8000";

    # 健康检查
    location /healthz {
        access_log off;
        return 200 '{"status":"healthy","service":"dispatcher","timestamp":"$time_iso8601"}';
    }

    # 主要业务逻辑
    location / {
      limit_req zone=req burst=5 nodelay;
      access_log /var/log/nginx/access.log main;

      access_by_lua_block {
        local cjson = require "cjson.safe"
        local http = require "resty.http"
        
        -- 读取认证头
        local user_id = ngx.req.get_headers()["X-User-ID"]
        local user_ns = ngx.req.get_headers()["X-User-NS"] or ngx.var.default_ns
        local route_sig = ngx.req.get_headers()["X-Route-Signature"]
        local route_ts = ngx.req.get_headers()["X-Route-Timestamp"]

        -- 基础验证
        if not user_id or user_id == "" then
          ngx.status = 401
          ngx.say('{"error":"Unauthorized: missing user identification"}')
          return ngx.exit(401)
        end

        -- 验证签名
        local secret = os.getenv("ROUTE_SIGNING_SECRET") or "route-sign"
        local msg = tostring(user_id) .. ":" .. user_ns .. ":" .. tostring(route_ts)
        local hmac = ngx.encode_base16(ngx.hmac_sha256(secret, msg)):lower()
        if hmac ~= route_sig then
          ngx.status = 401
          ngx.say('{"error":"Unauthorized: invalid signature"}')
          return ngx.exit(401)
        end

        -- 检查缓存
        local cache_key = "user_status:" .. user_id .. ":" .. user_ns
        local cache = ngx.shared.user_cache
        local cached_status = cache:get(cache_key)
        
        if cached_status == "ready" then
          ngx.ctx.user_ready = true
          goto proxy_target
        end

        -- 调用Manager检查状态
        local httpc = http.new()
        httpc:set_timeout(2000) -- 2秒超时
        
        local manager_url = ngx.var.manager_host .. "/internal/ensure-deployment/"
        local body = cjson.encode({
          user_id = tonumber(user_id),
          namespace = user_ns
        })
        
        local res, err = httpc:request_uri(manager_url, {
          method = "POST",
          body = body,
          headers = {
            ["Content-Type"] = "application/json",
            ["X-Internal-Auth"] = route_sig or ""
          },
          keepalive = false
        })
        
        if not res then
          ngx.log(ngx.ERR, "Manager unavailable: ", err)
          ngx.status = 503
          ngx.say('{"error":"Service temporarily unavailable"}')
          return ngx.exit(503)
        end
        
        -- 处理Manager响应
        if res.status == 200 then
          -- 用户环境已就绪
          cache:set(cache_key, "ready", 30) -- 缓存30秒
          ngx.ctx.user_ready = true
        elseif res.status == 202 then
          -- 正在扩容
          cache:set(cache_key, "scaling", 10) -- 缓存10秒
          ngx.status = 200
          ngx.header.content_type = "text/html"
          ngx.say([[
            <html>
              <head>
                <title>环境唤醒中</title>
                <meta charset="utf-8">
                <style>
                  body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                  .spinner { border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; width: 40px; height: 40px; animation: spin 2s linear infinite; margin: 20px auto; }
                  @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
                </style>
              </head>
              <body>
                <h2>您的专属环境正在唤醒</h2>
                <div class="spinner"></div>
                <p>请稍候，正在为您准备服务...</p>
                <script>
                  setTimeout(() => location.reload(), 5000);
                </script>
              </body>
            </html>
          ]])
          return ngx.exit(200)
        elseif res.status == 404 then
          -- 环境未部署
          ngx.status = 200
          ngx.header.content_type = "text/html"
          ngx.say([[
            <html>
              <head><title>环境准备中</title></head>
              <body>
                <h2>专属环境准备中</h2>
                <p>您的环境正在初始化，请稍候再试...</p>
                <script>
                  setTimeout(() => location.reload(), 10000);
                </script>
              </body>
            </html>
          ]])
          return ngx.exit(200)
        else
          -- 其他错误
          ngx.log(ngx.ERR, "Manager error: ", res.status, " ", res.body)
          ngx.status = 503
          ngx.say('{"error":"Service temporarily unavailable"}')
          return ngx.exit(503)
        end
        
        ::proxy_target::
      }

      # 设置代理目标
      set $target "";
      rewrite_by_lua_block {
        if not ngx.ctx.user_ready then
          return ngx.exit(503)
        end
        
        local uid = ngx.req.get_headers()["X-User-ID"]
        local ns = ngx.req.get_headers()["X-User-NS"] or ngx.var.default_ns
        ngx.var.target = "http://user-" .. uid .. "-svc." .. ns .. ".svc.cluster.local"
      }

      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-User-ID $http_x_user_id;
      proxy_set_header X-User-NS $http_x_user_ns;

      # 代理设置
      proxy_connect_timeout 3s;
      proxy_send_timeout 15s;
      proxy_read_timeout 15s;
      proxy_next_upstream error timeout http_502 http_503 http_504;
      proxy_next_upstream_tries 3;

      proxy_pass $target;

      # 错误处理
      proxy_intercept_errors on;
      error_page 404 502 503 504 = @wakeup;

      log_by_lua_block {
        local status = ngx.status
        local dict = ngx.shared.circuit
        local key = "cb:" .. (ngx.req.get_headers()["X-User-ID"] or "none") .. ":" .. (ngx.req.get_headers()["X-User-NS"] or "none")
        
        if status >= 500 then
          local f = (dict:get(key) or 0) + 1
          dict:set(key, f, 300) -- 5分钟熔断
        else
          dict:set(key, 0, 60)
        end
      }
    }

    # 统一的唤醒页面
    location @wakeup {
      internal;
      default_type text/html;
      return 200 '<html>
        <head>
          <title>服务唤醒中</title>
          <meta charset="utf-8">
          <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: #f5f5f5; }
            .container { max-width: 500px; margin: 0 auto; padding: 40px; background: white; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .spinner { border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; width: 40px; height: 40px; animation: spin 2s linear infinite; margin: 20px auto; }
            @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
          </style>
        </head>
        <body>
          <div class="container">
            <h2>🚀 专属环境唤醒中</h2>
            <div class="spinner"></div>
            <p>正在为您准备专属服务，请稍候...</p>
            <small>页面将在5秒后自动刷新</small>
          </div>
          <script>
            setTimeout(() => location.reload(), 5000);
          </script>
        </body>
      </html>';
    }
  }
}