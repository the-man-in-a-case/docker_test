# ========== 1. 命名空间 ==========
apiVersion: v1
kind: Namespace
metadata: { name: platform }
---
apiVersion: v1
kind: Namespace
metadata: { name: tenant-a }   # 默认租户命名空间
---

# ========== 2. RBAC 权限配置 ==========
apiVersion: v1
kind: ServiceAccount
metadata: { name: managersvc-sa, namespace: platform }
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata: { name: manager-user-stack }
rules:
  - apiGroups: ["", "apps"]
    resources: ["namespaces","services","deployments","deployments/scale","pods"]
    verbs: ["get","list","watch","create","delete","patch","update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata: { name: manager-user-stack-binding }
subjects:
  - kind: ServiceAccount
    name: managersvc-sa
    namespace: platform
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: manager-user-stack
---

# ========== 3. 应用密钥 ==========
apiVersion: v1
kind: Secret
metadata: { name: app-secrets, namespace: platform }
type: Opaque
stringData:
  DJANGO_SECRET: "change-me"
  JWT_SECRET: "jwt-secret-prod"
  ROUTE_SIGNING_SECRET: "route-sign-prod"
---

# ========== 4. 基础服务 - MySQL ==========
apiVersion: v1
kind: PersistentVolumeClaim
metadata: { name: mysql-pvc, namespace: platform }
spec:
  accessModes: ["ReadWriteOnce"]
  resources: { requests: { storage: 5Gi } }
---
apiVersion: apps/v1
kind: Deployment
metadata: { name: mysql, namespace: platform }
spec:
  selector: { matchLabels: { app: mysql } }
  replicas: 1
  template:
    metadata: { labels: { app: mysql } }
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          env:
            - { name: MYSQL_DATABASE, value: "tenants" }
            - { name: MYSQL_USER, value: "tenants" }
            - { name: MYSQL_PASSWORD, value: "tenants_pass" }
            - { name: MYSQL_ROOT_PASSWORD, value: "root_pass" }
          ports: [{ containerPort: 3306 }]
          volumeMounts: [{ name: data, mountPath: /var/lib/mysql }]
      volumes: [{ name: data, persistentVolumeClaim: { claimName: mysql-pvc } }]
---
apiVersion: v1
kind: Service
metadata: { name: mysql, namespace: platform }
spec:
  selector: { app: mysql }
  ports: [{ port: 3306, targetPort: 3306 }]
---

# ========== 5. 基础服务 - Redis ==========
apiVersion: apps/v1
kind: Deployment
metadata: { name: redis, namespace: platform }
spec:
  selector: { matchLabels: { app: redis } }
  replicas: 1
  template:
    metadata: { labels: { app: redis } }
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          ports: [{ containerPort: 6379 }]
---
apiVersion: v1
kind: Service
metadata: { name: redis, namespace: platform }
spec:
  selector: { app: redis }
  ports: [{ port: 6379, targetPort: 6379 }]
---

# ========== 6. 核心服务 - AuthSvc ==========
apiVersion: apps/v1
kind: Deployment
metadata: { name: authsvc, namespace: platform }
spec:
  replicas: 1
  selector: { matchLabels: { app: authsvc } }
  template:
    metadata: { labels: { app: authsvc } }
    spec:
      containers:
        - name: web
          image: authsvc:1.1
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: "250m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          env:
            - { name: PYTHONPATH, value: "/app" }
            - { name: DJANGO_SETTINGS_MODULE, value: "authsvc.settings" }
            - { name: DJANGO_SECRET, valueFrom: { secretKeyRef: { name: app-secrets, key: DJANGO_SECRET } } }
            - { name: JWT_SECRET, valueFrom: { secretKeyRef: { name: app-secrets, key: JWT_SECRET } } }
            - { name: ROUTE_SIGNING_SECRET, valueFrom: { secretKeyRef: { name: app-secrets, key: ROUTE_SIGNING_SECRET } } }
            - { name: MYSQL_HOST, value: "mysql.platform.svc.cluster.local" }
            - { name: MYSQL_DB, value: "tenants" }
            - { name: MYSQL_USER, value: "tenants" }
            - { name: MYSQL_PASSWORD, value: "tenants_pass" }
            - { name: MYSQL_PORT, value: "3306" }
            - { name: REDIS_URL, value: "redis://redis.platform.svc.cluster.local:6379/1" }
            - { name: REDIS_URL_SESSION, value: "redis://redis.platform.svc.cluster.local:6379/2" }
          ports: [{ containerPort: 8000 }]
          readinessProbe: { httpGet: { path: "/health", port: 8000 }, initialDelaySeconds: 2, periodSeconds: 5 }
---
apiVersion: v1
kind: Service
metadata: { name: authsvc, namespace: platform }
spec:
  selector: { app: authsvc }
  ports: [{ port: 8000, targetPort: 8000, nodePort: 30080 }]
---

# ========== 7. 核心服务 - ManagerSvc ==========
# 7.1 Web 组件
apiVersion: apps/v1
kind: Deployment
metadata: { name: managersvc-web, namespace: platform }
spec:
  replicas: 1
  selector: { matchLabels: { app: managersvc-web } }
  template:
    metadata: { labels: { app: managersvc-web } }
    spec:
      serviceAccountName: managersvc-sa
      containers:
        - name: web
          image: managersvc:1.1
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          env:
            - { name: PYTHONPATH, value: "/app" }
            - { name: DJANGO_SETTINGS_MODULE, value: "managersvc.settings" }
            - { name: DJANGO_SECRET, valueFrom: { secretKeyRef: { name: app-secrets, key: DJANGO_SECRET } } }
            - { name: JWT_SECRET, valueFrom: { secretKeyRef: { name: app-secrets, key: JWT_SECRET } } }
            - { name: ROUTE_SIGNING_SECRET, valueFrom: { secretKeyRef: { name: app-secrets, key: ROUTE_SIGNING_SECRET } } }
            - { name: MYSQL_HOST, value: "mysql.platform.svc.cluster.local" }
            - { name: MYSQL_DB, value: "tenants" }
            - { name: MYSQL_USER, value: "tenants" }
            - { name: MYSQL_PASSWORD, value: "tenants_pass" }
            - { name: MYSQL_PORT, value: "3306" }
            - { name: CELERY_BROKER_URL, value: "redis://redis.platform.svc.cluster.local:6379/0" }
            - { name: CELERY_RESULT_BACKEND, value: "redis://redis.platform.svc.cluster.local:6379/1" }
            - { name: K8S_IN_CLUSTER, value: "true" }
            - { name: DEFAULT_USER_NS, value: "tenant-a" }
          ports: [{ containerPort: 8000 }]
          readinessProbe: { httpGet: { path: "/health", port: 8000 }, initialDelaySeconds: 3, periodSeconds: 10 }
---
# 7.2 Service
apiVersion: v1
kind: Service
metadata: { name: managersvc, namespace: platform }
spec:
  selector: { app: managersvc-web }
  ports: [{ port: 8000, targetPort: 8000, nodePort: 30081 }]
---
# 7.3 Worker 组件
apiVersion: apps/v1
kind: Deployment
metadata: { name: managersvc-worker, namespace: platform }
spec:
  replicas: 1
  selector: { matchLabels: { app: managersvc-worker } }
  template:
    metadata: { labels: { app: managersvc-worker } }
    spec:
      serviceAccountName: managersvc-sa
      containers:
        - name: worker
          image: managersvc:latest
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          workingDir: "/app/managersvc"
          command: ["celery","-A","shared.celery","worker","-l","info","--concurrency","2", "--logfile=/dev/stdout"]
          env:
            - { name: PYTHONPATH, value: "/app" }
            - { name: DJANGO_SETTINGS_MODULE, value: "managersvc.settings" }
            - { name: CELERY_BROKER_URL, value: "redis://redis.platform.svc.cluster.local:6379/0" }
            - { name: CELERY_RESULT_BACKEND, value: "redis://redis.platform.svc.cluster.local:6379/1" }
            - { name: MYSQL_HOST, value: "mysql.platform.svc.cluster.local" }
            - { name: MYSQL_DB, value: "tenants" }
            - { name: MYSQL_USER, value: "tenants" }
            - { name: MYSQL_PASSWORD, value: "tenants_pass" }
            - { name: MYSQL_PORT, value: "3306" }
            - { name: K8S_IN_CLUSTER, value: "true" }
            - { name: DEFAULT_USER_NS, value: "tenant-a" }
---
# 7.4 Beat 组件
apiVersion: apps/v1
kind: Deployment
metadata: { name: managersvc-beat, namespace: platform }
spec:
  replicas: 1
  selector: { matchLabels: { app: managersvc-beat } }
  template:
    metadata: { labels: { app: managersvc-beat } }
    spec:
      serviceAccountName: managersvc-sa
      containers:
        - name: beat
          image: managersvc:latest
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          workingDir: "/app/managersvc"
          command: ["sh","-c"]
          args:
            - |
              # 动态修改 settings.py
              echo "
              # Auto-added by Kubernetes
              INSTALLED_APPS += ['django_celery_beat']
              CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
              " >> /app/managersvc/managersvc/settings.py

              celery -A shared.celery beat -l info --logfile=/dev/stdout

          env:
            - { name: PYTHONPATH, value: "/app" }
            - { name: DJANGO_SETTINGS_MODULE, value: "managersvc.settings" }
            - { name: CELERY_BROKER_URL, value: "redis://redis.platform.svc.cluster.local:6379/0" }
            - { name: CELERY_RESULT_BACKEND, value: "redis://redis.platform.svc.cluster.local:6379/1" }
            - { name: MYSQL_HOST, value: "mysql.platform.svc.cluster.local" }
            - { name: MYSQL_DB, value: "tenants" }
            - { name: MYSQL_USER, value: "tenants" }
            - { name: MYSQL_PASSWORD, value: "tenants_pass" }
            - { name: MYSQL_PORT, value: "3306" }
            - { name: K8S_IN_CLUSTER, value: "true" }
            - { name: DEFAULT_USER_NS, value: "tenant-a" }
---

# ========== 8. 核心服务 - Dispatcher ==========
apiVersion: apps/v1
kind: Deployment
metadata: { name: dispatcher, namespace: platform }
spec:
  replicas: 1
  selector: { matchLabels: { app: dispatcher } }
  template:
    metadata: { labels: { app: dispatcher } }
    spec:
      containers:
        - name: openresty
          image: dispatcher:latest
          imagePullPolicy: IfNotPresent

          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          env:
            - { name: ROUTE_SIGNING_SECRET, valueFrom: { secretKeyRef: { name: app-secrets, key: ROUTE_SIGNING_SECRET } } }
            - name: MANAGER_SVC
              value: "http://managersvc.platform.svc.cluster.local:8000"
            - name: AUTH_SVC
              value: "http://authsvc.platform.svc.cluster.local:8000"
          ports: [{ containerPort: 8080 }]
          readinessProbe: { httpGet: { path: "/healthz", port: 8080 }, initialDelaySeconds: 2, periodSeconds: 5 }

---
apiVersion: v1
kind: Service
metadata: { name: dispatcher, namespace: platform }
spec:
  selector: { app: dispatcher }
  ports: [{ port: 80, targetPort: 8080 }]
---

# ========== 9. 定时任务 ==========
apiVersion: batch/v1
kind: CronJob
metadata: { name: scale-idle-users, namespace: platform }
spec:
  schedule: "*/15 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: managersvc-sa
          restartPolicy: OnFailure
          containers:
            - name: caller
              image: managersvc:latest
              imagePullPolicy: IfNotPresent
              workingDir: "/app/managersvc"
              command: ["sh","-lc","python - <<'PY'\nfrom shared.celery import app; app.send_task('users.tasks.scale_idle_users_task', kwargs={'idle_minutes':60}); print('task sent')\nPY"]
              env:
                - { name: DJANGO_SETTINGS_MODULE, value: "managersvc.settings" }
                - { name: CELERY_BROKER_URL, value: "redis://redis.platform.svc.cluster.local:6379/0" }
                - { name: CELERY_RESULT_BACKEND, value: "redis://redis.platform.svc.cluster.local:6379/1" }
---

# ========== 10. 入口配置 ==========
# 带认证的 Ingress 配置
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: user-router-auth
  namespace: platform
  annotations:
    # 外部认证到 AuthN 服务
    nginx.ingress.kubernetes.io/auth-url: "http://authsvc.platform.svc.cluster.local:8000/auth/validate"
    nginx.ingress.kubernetes.io/auth-method: "POST"
    nginx.ingress.kubernetes.io/auth-response-headers: "X-User-ID,X-User-NS,X-Route-Timestamp,X-Route-Signature"
    # Ingress 层限流
    nginx.ingress.kubernetes.io/limit-rps: "5"
    nginx.ingress.kubernetes.io/limit-burst-multiplier: "5"
    nginx.ingress.kubernetes.io/limit-connections: "10"
    # 超时调优
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    # 认证缓存
    nginx.ingress.kubernetes.io/auth-cache-key: "$remote_user$http_authorization"
    nginx.ingress.kubernetes.io/auth-cache-duration: "200 5m"
    # 传递原始 URI
    nginx.ingress.kubernetes.io/auth-snippet: |
      proxy_set_header X-Original-URI $request_uri;
      proxy_set_header X-Original-Method $request_method;
      proxy_set_header X-User-ID $upstream_http_x_user_id;
      proxy_set_header X-User-NS $upstream_http_x_user_ns;
      proxy_set_header X-User-Role $upstream_http_x_user_role;
      proxy_set_header X-Route-Timestamp $upstream_http_x_route_timestamp;
      proxy_set_header X-Route-Signature $upstream_http_x_route_signature;
      proxy_set_header Authorization $http_authorization;
    # 基础配置
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
          - path: /api(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: dispatcher
                port:
                  number: 8000

          # ManagerSvc (管理员 API，直连，不走 dispatcher)
          - path: /managersvc(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: managersvc
                port:
                  number: 8000

          # AuthSvc (JWT 签发/验证直测，不走 dispatcher)
          - path: /authsvc(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: authsvc
                port:
                  number: 8000